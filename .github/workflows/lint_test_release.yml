name: Lint Test Release

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint with pylint
        run: pylint src tests
  
  test:
    needs: lint
    uses: ./.github/workflows/test.yml
  
  release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Compute version number from tags/commits
        uses: paulhatch/semantic-version@v4.0.2
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          format: "${major}.${minor}.${patch}-pre${increment}"
          short_tags: false
          bump_each_commit: true
          
      - name: Generate version number
        id: generate_version_output
        run: echo "::set-output name=version::${{ steps.semantic_version.outputs.major }}.${{ steps.semantic_version.outputs.minor }}.${{ steps.semantic_version.outputs.patch }}-pre${{ steps.semantic_version.outputs.increment }}"
        shell: bash
        
      - name: Display version
        run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
        shell: bash
        
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.generate_version_output.outputs.version }}
          release_name: ${{ github.event.repository.name }}-v${{ steps.generate_version_output.outputs.version }}
          body: |
            Last build of ${{ github.event.repository.name }} Python package.
          draft: false
          prerelease: true
        
      - name: Write release destination file
        working-directory: src/${{ github.event.repository.name }}
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      - name: Upload release url
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: src/${{ github.event.repository.name }}/release_url.txt
          
      - name: Write release version to a file
        working-directory: src/${{ github.event.repository.name }}
        run: echo "${{ steps.generate_version_output.outputs.version }}" > release_version.txt
        
      - name: Upload release version
        uses: actions/upload-artifact@v2
        with:
          name: release_version
          path: src/${{ github.event.repository.name }}/release_version.txt
  
  upload:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - uses: actions/download-artifact@v2
        with:
          name: release_url
          
      - name: Get release url
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url.txt)"
          
      - uses: actions/download-artifact@v2
        with:
          name: release_version
          
      - name: Get release version
        id: get_release_version
        run: |
          echo "::set-output name=version::$(cat release_version.txt)"
          
      - name: Change version number in setup.py
        run: |
          sed -i 's/version="0.0.1"/version="${{steps.get_release_version.outputs.version}}"/g' setup.py
        
      - name: Build
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade build
          python3 -m build
          
      - name: Get wheel name
        id: get_wheel_filename
        working-directory: dist
        run: |
          echo "::set-output name=filename::$(ls *.whl)"
          
      - name: Upload file
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: dist/${{steps.get_wheel_filename.outputs.filename}}
          asset_name: ${{steps.get_wheel_filename.outputs.filename}}
          asset_content_type: application/octet-stream
          
